#version 330 core
out vec4 FragColor;

in vec2 TexCoords;
in vec3 ANormal;
in vec3 FragPos;
in vec3 ViewPos;
in vec3 vFragColor;

// Cube map
in vec3 Normal;
in vec3 Position;

uniform sampler2D texture_diffuse1;
uniform samplerCube skybox;

void main()
{    

	// Lighting computation 
	// colorAtPixel = (ambient + diffuse + specular) * colorOfObject

	// Defining light - color(white), position, direction
	// TODO_Future - Define Light in scene and pass it to the shader
	vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);
	vec3 lightPos = vec3(-3.0f, 3.0f, -3.0f);
	vec3 lightDir = normalize(lightPos - FragPos);

	// BEGIN - Ambient light
	float ambientPower = 0.01;
	vec3 ambient = ambientPower * lightColor;
	// END - Ambient light

	// BEGIN - Diffuse Effect
	vec3 norm = normalize(ANormal);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;
	// END - Diffuse Effect

	// BEGIN - Specular Effect
	float specularStrength = 1.5;
	vec3 viewDir = normalize(ViewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor;
	// END - Specular Effect

	// REFLECTION - cube map
    vec3 I = normalize(Position - ViewPos);
    vec3 Reflect = reflect(I, normalize(Normal));
	Reflect = texture(skybox, Reflect).rgb;

	// REFRACTION - cube map
	float Eta = 0.67;
	vec3 Refract = refract(I, normalize(Normal), Eta);
	Refract = texture(skybox, Refract).rgb;

	// FRESNEL
	float fresnelPower = 1.5;
	float fresnelQuotient = ((1.0 - Eta) * (1.0 - Eta)) / ((1.0 + Eta) * (1.0 + Eta));
	float fresnelRatio = fresnelQuotient + (1.0 - fresnelQuotient) * pow((1.0 - dot(-I, norm)), fresnelPower);
	vec3 fresnelColor   = mix(Refract, Reflect, fresnelRatio);

	// Compute the final color combining all the components
	FragColor = (vec4(ambient, 1.0f) + vec4(diffuse, 1.0f) + vec4(specular, 1.0f))  * vec4(vFragColor, 1.0f) + vec4(fresnelColor, 1.0);


	// overwriting light with cubemap texture
	FragColor = vec4(fresnelColor, 1.0);
}