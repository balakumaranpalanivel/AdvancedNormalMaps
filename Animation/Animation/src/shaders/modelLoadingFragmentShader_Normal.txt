#version 330 core
out vec4 FragColor;

in VS_OUT
{
	in vec2 TexCoords;
	in vec3 ANormal;
	in vec3 FragPos;
	in vec3 ViewPos;

	// tangent space
	vec3 FragNormal;
	vec3 lightPos;
	vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
	mat3 TBN;
} fs_in;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_normal1;

void main()
{    

	// Lighting computation 
	// colorAtPixel = (ambient + diffuse + specular) * colorOfObject

	// Defining light - color(white), position, direction
	// TODO_Future - Define Light in scene and pass it to the shader
	vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);
	vec3 lightDir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);

	// BEGIN - Ambient light
	float ambientPower = 0.1;
	vec3 ambient = ambientPower * lightColor;
	// END - Ambient light

	// BEGIN - Diffuse Effect
	vec3 norm = normalize(fs_in.FragNormal);
	norm = texture(texture_normal1, fs_in.TexCoords).rgb;
	norm = normalize(norm * 2.0 - 1.0);
	//norm = normalize(fs_in.TBN * norm);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;
	// END - Diffuse Effect

	// BEGIN - Specular Effect
	float specularStrength = 1.5;
	vec3 viewDir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);
	vec3 halfDir = normalize(lightDir + viewDir);
	float specFactor = pow(max(dot(halfDir, norm), 0.0), 32.0);
	vec3 specular = specFactor * specularStrength * lightColor;
	vec3 result = ambient + diffuse + specular;

	//vec3 reflectDir = reflect(-lightDir, norm);
	//float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	//vec3 specular = specularStrength * spec * lightColor;
	// END - Specular Effect

	// Compute the final color combining all the components
	FragColor = (vec4(ambient, 1.0f) + vec4(diffuse, 1.0f) + vec4(specular, 1.0f)) * texture(texture_diffuse1, fs_in.TexCoords) * 2;
	//FragColor = vec4(result, 1.0f);
}